Intel(R) Processor Trace Decoder Library
========================================


This contains a library for decoding Intel(R) Processor Trace (PT) together with
sample implementations of simple tools built on top of the library that show how
to use the library in your own tool.


Contents
--------

  README        this file

  libipt        A packet encoder/decoder library
                A document describing the usage of the decoder library


Optional Contents and Samples
-----------------------------

  ptdump        Example implementation of a packet dumper

  ptxed         Example implementation of a trace disassembler

  pttc          A trace test generator

  ptunit        A simple unit test system

  script        A collection of scripts

  doc           A document describing how to get started
                A document describing pttc


Dependencies
------------

We use cmake for building.

  cmake         The cross-platform open-source build system.
                http://www.cmake.org


Other packages you need for some of the above optional components.

  check         A unit test framework for C.
                http://sourceforge.net/projects/check

                This is needed for libipt and pttc unit tests.

  xed           The Intel x86 instruction encoder and decoder.
                http://www.pintool.org - version 2.13-62732

                This is needed to build and run the trace disassembler example.

  yasm          The Yasm Modular Assembler
                http://github.com/yasm

                This is needed to run pttc.

  doxygen       Generate documentation from source code
                http://doxygen.org

                This is needed to build documentation.


Features
--------

Some of the tools support separately enabled features.  Features are
enabled by defining the respective FEATURE_<name> pre-processor macro
or by setting the respective FEATURE_<name> cmake variable.

The following features are supported:

  MMAP          Map files into memory.

  ELF           Support for the ELF object format.


Building on Linux and OS X
--------------------------

Navigate to your desired destination directory and call ccmake with the
source directory:

  $ cd /path/to/dest
  $ ccmake /path/to/pt/src

After configuring the cmake cache, build normally:

  $ make


Building on Windows
-------------------

Start the cmake GUI and follow the instructions.


Maintainers
-----------

  Markus Metzger        <markus.t.metzger@intel.com>
  Thilo Schmitt         <thilo.schmitt@intel.com>
  Christian Himpel      <christian.himpel@intel.com>
