pttc -- Part of Intel(R) Processor Trace Decoder
================================================

Pttc takes a yasm assembly file and creates a Processor Trace stream
from special directives in its input.

Usage
-----

$ pttc path/to/file.ptt

If no error occurs, the following files will be generated:
- file.lst
- file.bin
- file.pt
- file.exp

The .lst and .bin files are generated by a call to yasm.  The .pt file
contains the Processor Trace and the .exp file the content of the
comments after the .exp directive.

Pttc prints the filenames of the generated .exp files to stdout.


Syntax
------

Pttc allows annotations in the comments of yasm assembler source files.
The parser recognizes all comments which contain the "@pt " directive
marker.

Every pt directive can be preceeded by a label name followed by a ':'.
Please refer to the description of the .exp() directive below on how to
use these labels.

The general syntax for pt directives is:

	@pt [label:]directive([arguments])


The following lists the directives that are understood by pttc.


* @pt psb()
* @pt psbend()
* @pt pad()
* @pt ovf()

These packets do not have any arguments and correspond to the packets
from the specification.


* @pt tnt(args)
* @pt tnt64(args)

The arguments of the tnt and tnt64 packets is a list of Takens (t) and
Not-Takens (n).  For better readability an arbitrary number of blanks
and dots can be intervened.

It is an error if no characters, only blanks or dots, or other characters
are in the payload.  Additionally for the TNT packet and the TNT64 packet
it is an error to have more than 6 and more than 47 t's or n's in the
payload, respectively.


* @pt tip(ipc: addr)
* @pt tip.pge(ipc: addr)
* @pt tip.pgd(ipc: addr)
* @pt fup(ipc: addr)

These packets accept arbitrary addresses.  Addr must be a parsable
integer or a valid label name.  Ipc specifies the IP compression bits
as integer number.

If addr is given as a label, the address is truncated according to the
IP bytes value given in ipc.
If addr is given as integer, it needs to be a zero-extended integer no
bigger than specified in ipc.


* @pt mode.exec(mode)

Mode must be one of the following strings:
	* 16bit
	* 32bit
	* 64bit


* @pt mode.tsx(state)

State must be one of the following strings:
	* begin
	* abort
	* commit


* @pt pip(addr)

Addr is the value that was written to CR3.


* @pt tsc(value)

Value is the timestamp.


* @pt cbr(value)

Value is the core/bus ratio.


* @pt .exp([extra])

Every occurrence of this directive prints all the lines, following this
directive, to a file[-extra].exp.

The first occurrence of this directive stops processing of other
directives.

In order to have a valid yasm file, it is necessary to put the expected
output into yasm comments (with the semi-colon character).  Any
character up to (and including) the semi-colon is not printed to the
.exp file.  Trailing white space is removed from each line.

Comments can be made with the '#' character and go to the end of line.
Comments are treated as trailing white space, i.e. they are not printed
in the .exp file.

Each line that contains no yasm comment at all is not printed to the exp
file.  Empty lines can be used to structure the expected output text.

In exp files, the address of a yasm label can be substituted with the
syntax with:

	%[0]label[.<number>].


That means, labels are prefixed with '%', e.g. %label and the address of
label will be substituted with a hex number including leading "0x".
Only labels with alphanumeric characters and '_' are currently
supported.  Labels with other names cannot be referred to.

Sometimes it is necessary to print the address with leading zeroes.
This can be done by prefixing the label with '0', e.g. %0label and the
address of label will be substituted with leading zeroes applied.  The
maximum number of hex characters is 16 if printed with leading zeroes.

The least significant bytes of an address can be masked by appending '.'
and the number of bytes that should be kept, e.g. %label.2 and the
address of label will be substitued but only the 2 least significant
bytes are kept.

The packet number of pt directives can also be substituted in the
output.  These numbers are printed in decimal.  The syntax is:

	%label


Only labels with alphanumeric characters and '_' are currently
supported.  Labels with other names cannot be referred to.

There is a special label for the byte offset after the last packet:
%eos.


Note, all labels must be unique and it is an error to have 2 or more
labels with the same name.
